{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","num","setNum","table","setTable","useEffect","handleUpdateTable","tmpTable","j","row","Array","fill","i","push","makeMultiplicationTable","console","keyCounter","tableEl","map","rowEl","cell","style","textAlign","backgroundColor","title","toString","width","print2DArray","className","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAmGeA,MAjGf,WACE,MAAsBC,mBAFJ,IAElB,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,IAEH,IAsEMA,EAAoB,WACxB,IAAMC,EA/DwB,SAACN,GAG/B,IAFA,IAAME,EAAQ,GAELK,EAAI,EAAGA,GAAKP,EAAKO,IAAK,CAE7B,IADA,IAAIC,EAAM,IAAIC,MAAMT,GAAKU,KAAK,GACrBC,EAAI,EAAGA,EAAIX,EAAKW,IACvBH,EAAIG,IAAMA,EAAI,GAAKJ,EAErBL,EAAMU,KAAKJ,GAEb,OAAON,EAqDUW,CAAwBb,GACzCc,QAAQZ,MAAMI,GACdH,EA/CmB,SAACD,GACpB,IAAIa,EAAa,EACXC,EAAUd,EAAMe,KAAI,SAACT,EAAKD,GAC9B,IAAMW,EAAQV,EAAIS,KAAI,SAACE,EAAMR,GAE3B,OADAI,GAAc,EAEZ,mCACGJ,IAAMJ,EACL,oBACEa,MAAO,CAAEC,UAAW,SAAUC,gBAAiB,UAE/CC,MAAK,UAAKZ,EAAL,YAAUJ,GAHjB,SAKGY,GAHIJ,EAAWS,YAKV,IAANb,GAAiB,IAANJ,EACb,oBACEa,MAAO,CAAEC,UAAW,SAAUC,gBAAiB,aAE/CC,MAAK,UAAKZ,EAAL,YAAUJ,GAHjB,SAKGY,GAHIJ,EAAWS,YAMlB,oBACEJ,MAAO,CAAEC,UAAW,SAAUC,gBAAiB,aAE/CC,MAAK,UAAKZ,EAAL,YAAUJ,GAHjB,SAKGY,GAHIJ,EAAWS,iBAS1B,OAAO,6BAAaN,GAAJX,MAElB,OACE,uBAAOa,MAAO,CAAEK,MAAO,QAAvB,SACE,gCAAQT,MAQHU,CAAapB,KAGxB,OACE,sBAAKqB,UAAU,MAAf,UACE,wDACwB,qCAAQ3B,EAAR,UAExB,uBAAO4B,MAAO5B,EAAK6B,SAjFC,SAACC,GACvB7B,EAAO6B,EAAEC,OAAOH,UAiFd,wBAAQI,QAAS3B,EAAjB,oBACA,uBACCH,MClFQ+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b61f1e20.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nconst DEFAULT_NUM = 10;\nfunction App() {\n  const [num, setNum] = useState(DEFAULT_NUM);\n  const [table, setTable] = useState(null);\n\n  useEffect(() => {\n    handleUpdateTable();\n  }, []);\n\n  const handleChangeNum = (e) => {\n    setNum(e.target.value);\n  };\n\n  /**\n   * returns core logic to make a 2D array of multiplication table\n   * @returns 2D array\n   */\n  const makeMultiplicationTable = (num) => {\n    const table = [];\n    // counter starting at 1 to avoid zero padding on table\n    for (let j = 1; j <= num; j++) {\n      let row = new Array(num).fill(1);\n      for (let i = 0; i < num; i++) {\n        row[i] = (i + 1) * j;\n      }\n      table.push(row);\n    }\n    return table;\n  };\n\n  /**\n   * converts table 2D array to jsx table element\n   * @param {2D array} table\n   * @returns table html element jsx\n   */\n  const print2DArray = (table) => {\n    let keyCounter = 0;\n    const tableEl = table.map((row, j) => {\n      const rowEl = row.map((cell, i) => {\n        keyCounter += 1;\n        return (\n          <>\n            {i === j ? (\n              <td\n                style={{ textAlign: 'center', backgroundColor: 'yellow' }}\n                key={keyCounter.toString()}\n                title={`${i}*${j}`}\n              >\n                {cell}\n              </td>\n            ) : i === 0 || j === 0 ? (\n              <th\n                style={{ textAlign: 'center', backgroundColor: 'lightblue' }}\n                key={keyCounter.toString()}\n                title={`${i}*${j}`}\n              >\n                {cell}\n              </th>\n            ) : (\n              <td\n                style={{ textAlign: 'center', backgroundColor: 'lightblue' }}\n                key={keyCounter.toString()}\n                title={`${i}*${j}`}\n              >\n                {cell}\n              </td>\n            )}\n          </>\n        );\n      });\n      return <tr key={j}>{rowEl}</tr>;\n    });\n    return (\n      <table style={{ width: '100%' }}>\n        <tbody>{tableEl}</tbody>\n      </table>\n    );\n  };\n\n  const handleUpdateTable = () => {\n    const tmpTable = makeMultiplicationTable(num);\n    console.table(tmpTable);\n    setTable(print2DArray(tmpTable));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Multiplication table: <mark> {num} </mark>\n      </h1>\n      <input value={num} onChange={handleChangeNum}></input>\n      <button onClick={handleUpdateTable}>Update</button>\n      <hr />\n      {table}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}