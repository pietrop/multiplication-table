{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","num","setNum","table","setTable","useEffect","tmpTable","printMultiplicationTable","row","counter","j","Array","fill","map","n","i","style","textAlign","backgroundColor","title","push","width","className","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMA4DeA,MA1Df,WACE,MAAsBC,mBAFJ,IAElB,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACR,IAAMC,EAAWC,IACjBH,EAASE,KACR,IAEH,IAIMC,EAA2B,WAK/B,IAJA,IAAIJ,EAAQ,GACRK,EAAM,GACNC,EAAU,EAHuB,WAK5BC,GACPF,EAAM,IAAIG,MAAMV,GAAKW,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAGnC,OADAN,GAAW,EAET,oBACEO,MAAO,CAAEC,UAAW,SAAUC,gBAAiBH,EAAI,IAAML,EAAI,SAAW,aAD1E,SAIGK,EAAI,IAAML,EACT,mBAAGS,MAAK,UAAKJ,EAAI,EAAT,YAAcL,GAAtB,UAA6BK,EAAI,GAAKL,IAEtC,sBAAMS,MAAK,UAAKJ,EAAI,EAAT,YAAcL,GAAzB,UAAgCK,EAAI,GAAKL,KALtCD,MAUXN,EAAMiB,KAAK,6BAAaZ,GAAJE,KAjBbA,EAAI,EAAGA,GAAKT,EAAKS,IAAM,EAAvBA,GAmBT,OAAO,uBAAOM,MAAO,CAAEK,MAAO,QAAvB,SAAkClB,KAQ3C,OACE,sBAAKmB,UAAU,MAAf,UACE,wDACwB,qCAAQrB,EAAR,UAExB,uBAAOsB,MAAOtB,EAAKuB,SAzCC,SAACC,GACvBvB,EAAOuB,EAAEC,OAAOH,UAyCd,wBAAQI,QAXc,WACxB,IAAMrB,EAAWC,EAAyBN,GAC1CG,EAASE,IASP,oBACA,uBACCH,MC3CQyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3e7d4fa5.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nconst DEFAULT_NUM = 10;\nfunction App() {\n  const [num, setNum] = useState(DEFAULT_NUM);\n  const [table, setTable] = useState(null);\n\n  useEffect(() => {\n    const tmpTable = printMultiplicationTable();\n    setTable(tmpTable);\n  }, []);\n\n  const handleChangeNum = (e) => {\n    setNum(e.target.value);\n  };\n\n  const printMultiplicationTable = () => {\n    let table = [];\n    let row = [];\n    let counter = 0;\n    // counter starting at 1 to avoid zero padding on table\n    for (let j = 1; j <= num; j++) {\n      row = new Array(num).fill(1).map((n, i) => {\n        // i+1 to start at 1 and not at zero\n        counter += 1;\n        return (\n          <td\n            style={{ textAlign: 'center', backgroundColor: i + 1 === j ? 'yellow' : 'lightblue' }}\n            key={counter}\n          >\n            {i + 1 === j ? (\n              <b title={`${i + 1}*${j}`}>{(i + 1) * j}</b>\n            ) : (\n              <span title={`${i + 1}*${j}`}>{(i + 1) * j}</span>\n            )}\n          </td>\n        );\n      });\n      table.push(<tr key={j}>{row}</tr>);\n    }\n    return <table style={{ width: '100%' }}>{table}</table>;\n  };\n\n  const handleUpdateTable = () => {\n    const tmpTable = printMultiplicationTable(num);\n    setTable(tmpTable);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Multiplication table: <mark> {num} </mark>\n      </h1>\n      <input value={num} onChange={handleChangeNum}></input>\n      <button onClick={handleUpdateTable}>Update</button>\n      <hr />\n      {table}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}